""" 
The abstract :py:class:Target` class.
It is a central concept of finestrino and represents the state of the workflow
"""
logger = logging.getLogger("finestrino-interface")

@six.add_metaclass(abc.ABCMeta)
class Target(object):
    """ 
    A Target is a resource generated by a :py:class:`~finestrino.task.Task`.
    For example, a Target might correspond to a file in HDFS or data in a database.
    The Target interface defines one method that must be overriden :py:meth:`exists`,
    which signifies if the Target has been created or Not.

    Typically, a :py:class:`~finestrino.task.Task` will define one or more Targets 
    as output, and the Task is considered complete if and only if each of its output Targets exist.
    """
    @abc.abstractmethod
    def exists(self):
        """
        Returns True if the :py:class:`Target` exists and False otherwise.
        """
        pass

class FileSystemException(Exception):
    """ 
    Base class for generic file system exceptions.
    """
    pass

class FileAlreadyExists(FileSystemException):
    """ 
    Raised when a parent directory doesn't exist.
    (Imagine mkdir without a -p)
    """
    pass

class NotADirectory(FileSystemException):
    """ 
    Raised when a file system operation can't be performed because an 
    expected directory is actually a fiel.
    """
    pass

@six.add_metaclass(abc.ABCMeta)
class FileSystem(object):
    